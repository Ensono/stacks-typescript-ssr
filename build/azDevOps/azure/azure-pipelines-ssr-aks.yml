#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and component will produce a name of `$company-$project-$stage-$component`    #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$component`                                                                                   #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v2.0.1
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.2
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.12
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.8
    - container: cypress
      image: cypress/base:12.16.2
    - container: lhci
      image: amidostacks/lhci:0.0.2

variables:
  company: amido
  project: stacks
  domain: node
  role: frontend
  component: ssr-ui
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  self_repo: stacks-typescript-ssr
  self_repo_src: src/ssr
  self_repo_dir: "$(Agent.BuildDirectory)/s/$(self_repo)"
  self_project_dir: "$(self_repo_dir)/$(self_repo_src)"
  self_repo_tf_src: deploy/azure/app/kube
  self_repo_tf_dir: "$(self_repo_dir)/$(self_repo_tf_src)"
  self_pipeline_repo: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  self_pipeline_scripts_dir: "$(self_pipeline_repo)/scripts"
  # TF STATE CONFIG
  tf_state_rg: "Stacks-Ancillary-Resources"
  tf_state_storage: "amidostackstfstate"
  tf_state_container: "tfstate"
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  tf_state_key: "stacks-webapp"
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  version_build_number: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"
  # Docker Config
  docker_dockerfile_path: "src/"
  docker_image_name: $(component)
  docker_image_tag: "$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)"
  docker_container_registry_name_nonprod: amidostacksnonprodeuwcore
  k8s_docker_registry_nonprod: $(docker_container_registry_name_nonprod).azurecr.io
  docker_container_registry_name_prod: amidostacksprodeuwcore
  k8s_docker_registry_prod: $(docker_container_registry_name_prod).azurecr.io
  # Environment
  # Set the name of the resource group that has the DNS zones to be updated
  dns_zone_resource_group: "Stacks-Ancillary-Resources"
  # AKS/AZURE
  region: "westeurope"
  base_domain_nonprod: nonprod.amidostacks.com
  base_domain_internal_nonprod: nonprod.amidostacks.internal
  base_domain_prod: prod.amidostacks.com
  base_domain_internal_prod: prod.amidostacks.internal
  # Dynamic vars for downstream purposes
  # tf_workspace_suffix: $[]
  scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-20.04
  # Test setup
  # ADD Vars here
  # TestCafe E2E Tests
  testcafe_e2e_test: true
  testcafe_working_directory: "${{ variables.self_repo_dir }}/test/testcafe"
  # Resource Test Results Blob Storage Container
  test_results_container: "testresults"
  # Lighthouse Audit
  lighthouse_audit: true
  lighthouse_config_path: '${{ variables.self_repo_dir }}/test/lighthouse-ci'
  lighthouse_config_filename: lighthouserc.json
  # Yamllint
  yamllint_config_file: "${{ variables.self_repo_dir }}/yamllint.conf"
  yamllint_scan_directory: "."

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-webapp
    jobs:
      - job: WebAppBuild
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - checkout: self

          - checkout: templates

          # Updates the build number in Azure DevOps (requires refresh in the UI to see)
          - bash: |
              echo '##vso[Build.UpdateBuildNumber]${{ variables.version_build_number }}'
            displayName: 'Update: Build Number'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: templates/steps/build/test-validate-yaml.yml
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Runs a terraform fomatting check and a validation check
          - template: templates/steps/build/test-validate-terraform.yml
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              terraform_container: "terraform_custom"
              terraform_directory: "${{ variables.self_repo_tf_dir }}"

          # Build Project
          - template: templates/steps/build/build-ssr.yml
            parameters:
              container: "host"
              # Docker Config
              build_on_server: false
              docker_build: true
              login_azure: true
              # TODO: normalize this
              docker_build_additional_args: "--build-arg NEXT_PUBLIC_CONTENTFUL_SPACE_ID=$(NEXT_PUBLIC_CONTENTFUL_SPACE_ID) --build-arg NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN=$(NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN) --build-arg APP_BASE_PATH=/web/stacks ."
              docker_workdir: $(self_project_dir)
              docker_imagename: $(docker_image_name)
              docker_imagetag: $(docker_image_tag)
              docker_containerregistryname: $(docker_container_registry_name_nonprod)
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              sonar_container: sonar_scanner
              sonar_env: {
                SONAR_HOST_URL: "https://sonarcloud.io",
                SONAR_TOKEN: $SONAR_TOKEN,
                SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY,
                SONAR_ORGANIZATION: $SONAR_ORGANIZATION,
                SONAR_PROJECT_NAME: $SONAR_PROJECT_NAME,
                BUILD_NUMBER: $(docker_image_tag),
                SONAR_SCANNER_OPTS: ""
              }
              # Linting and formatting validation
              lint_formatting: false
              shared_eslint_config: "@amidostacks/eslint-config@latest"
              # Should be hardcoded in your sonar-project.properties file
              unit_test: true
              project_root_dir: $(self_project_dir)
              cypress_e2e_test: true
              cypress_applitools_test: true
              cypress_container: cypress
              # Set this to false or remove if cypress is not run as part of your pipeline
              cache_cypress: true
              cypress_e2e_env_vars:
                PORT: 3000
                APP_BASE_URL: "http://localhost"
                MENU_API_URL: "https://dev-netcore-api.nonprod.amidostacks.com/api/menu"
                APP_BASE_PATH: ""
                NODE_ENV: development
                # avoid warnings about terminal
                TERM: xterm

  - stage: Dev
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: dev
    jobs:
      - deployment: AppInfraDev
        pool:
          vmImage: $(pool_vm_image)
        container: terraform_custom
        environment: ${{ variables.domain }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '$(self_repo_tf_dir)'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(azure-client-id)
                    terraform_backend_client_secret: $(azure-client-secret)
                    terraform_backend_tenant_id: $(azure-tenant-id)
                    terraform_backend_subscription_id: $(azure-subscription-id)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    # Azure Config
                    azure_client_id: $(azure-client-id)
                    azure_client_secret: $(azure-client-secret)
                    azure_tenant_id: $(azure-tenant-id)
                    azure_subscription_id: $(azure-subscription-id)
                    # TODO: Why does this have component on the end?
                    terraform_state_workspace: $(Environment.ShortName)-$(component)
                    # Global Config
                    company: $(company)
                    project: $(project)
                    environment: ''
                    azure_cli_providers: [
                      {name: MSIPreview, namespace: Microsoft.ContainerService}
                    ]
                    # Azure config
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_gateway_frontend_ip_name: "amido-stacks-nonprod-euw-core",
                      TF_VAR_app_insights_name: "amido-stacks-nonprod-euw-core",
                      TF_VAR_core_resource_group: "amido-stacks-nonprod-euw-core",
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_domain: $(domain),
                      TF_VAR_name_component: $(component),
                      TF_VAR_stage: $(Environment.ShortName),
                      TF_VAR_create_cosmosdb: false,
                      # TODO: Should this be domain like everything else?
                      TF_VAR_dns_record: $(Environment.ShortName)-$(component),
                      TF_VAR_dns_zone_name: $(base_domain_nonprod),
                      TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)",
                      TF_VAR_internal_dns_zone_name: $(base_domain_internal_nonprod),
                      TF_VAR_account_replication_type: "LRS",
                      TF_VAR_account_kind: "StorageV2",
                      TF_VAR_account_tier: "Standard",
                      TF_VAR_storage_container_name: "$(test_results_container)",
                      TF_VAR_create_cache: true,
                      TF_VAR_cache_capacity: "2",
                      TF_VAR_cache_family: "C",
                      TF_VAR_cache_sku_name: "Standard",
                      TF_VAR_cache_enable_non_ssl_port: "false",
                      TF_VAR_cache_minimum_tls_version: "1.2",
                      TF_VAR_cache_redis_enable_authentication: "true",
                      TF_VAR_cache_redis_maxmemory_reserved: "2",
                      TF_VAR_cache_redis_maxmemory_delta: "2",
                      TF_VAR_cache_redis_maxmemory_policy: "allkeys-lru",
                      TF_VAR_response_header_cdn: "[
                          {
                            action = \"Append\",
                            name = \"Content-Security-Policy\",
                            value = \"default-src * 'unsafe-inline' 'unsafe-eval'\",
                          },
                      ]",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        variables:
          - name: redis_host
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.redis_cache_hostname'] ]
          - name: redis_key
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.redis_cache_key'] ]
          - name: app_insights_instrumentation_key
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.app_insights_instrumentation_key'] ]
          - name: storage_account_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.storage_account_name'] ]
          # TODO: Should this be domain like everything else?
          - name: namespace
            value: $(Environment.ShortName)-$(component)
          - name: dns_pointer
            value: "$(Environment.ShortName)-$(component).$(base_domain_nonprod)"
          - name: api_full_url
            value: "https://$(Environment.ShortName)-netcore-api.$(base_domain_nonprod)/api/menu"
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: 'templates/steps/deploy/deploy-app.yml'
                  parameters:
                    container: "k8s_deploy"
                    pipeline_scripts_directory: $(self_pipeline_scripts_dir)
                    shared_replacements: {
                      namespace: $(namespace),
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: $(component),
                      resource_def_name: $(component),
                      version: $(docker_image_tag),
                      environment: $(Environment.ShortName)
                    }
                    template_input: [
                      {
                        base: "${{ variables.self_repo_dir }}/deploy/k8s/app/base_app-deploy.yml",
                        out: "${{ variables.self_repo_dir }}/deploy/k8s/app/app-deploy.yml",
                        displayName: App Deployment,
                        replacements: {
                          dns_pointer: "${{ variables.dns_pointer }}",
                          tls_domain: $(base_domain_nonprod),
                          k8s_app_path: /web/stacks,
                          k8s_image: '$(k8s_docker_registry_nonprod)/$(docker_image_name):$(docker_image_tag)',
                          api_url: "${{ variables.api_full_url }}",
                          app_name: webapp-template,
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(app_insights_instrumentation_key),
                          next_public_token: $(NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN),
                          next_space_id: $(NEXT_PUBLIC_CONTENTFUL_SPACE_ID),
                          auth_client_secret: $(AUTH0_CLIENT_SECRET),
                          auth_domain: $(AUTH0_DOMAIN),
                          auth_client_id: $(AUTH0_CLIENT_ID),
                          redis_host: $(redis_host),
                          redis_key: $(redis_key),
                          redis_port: "6380",
                          redis_enabled: "true"
                        },
                        args: "-no-empty",
                      }
                    ]
                    azure_client_id: "$(azure-client-id)"
                    azure_client_secret: "$(azure-client-secret)"
                    azure_tenant_id: "$(azure-tenant-id)"
                    azure_subscription_id: "$(azure-subscription-id)"
                    aks_cluster_resourcegroup: "amido-stacks-nonprod-euw-core"
                    aks_cluster_name: "amido-stacks-nonprod-euw-core"
                    # Used to do a `kubectl rollout status`
                    deployments: [
                      {
                        name: "deploy/$(component)",
                        namespace: "${{ variables.namespace }}",
                        timeout: "120s",
                      },
                    ]

                - template: "templates/steps/deploy/deploy-post-deploy-tests.yml"
                  parameters:
                    app_base_url: "https://${{ variables.dns_pointer }}"
                    app_path: "/web/stacks"
                    api_full_url: "${{ variables.api_full_url }}"
                    testcafe_e2e_test: ${{ variables.testcafe_e2e_test }}
                    testcafe_working_directory: "$(testcafe_working_directory)"
                    test_results_storage: $(storage_account_name)
                    test_results_container: $(test_results_container)
                    test_results_path: $(testcafe_working_directory)
                    test_results_blob_prefix: "$(Environment.ShortName)-$(Build.BuildNumber)"
                    lighthouse_audit: ${{ variables.lighthouse_audit }}
                    lighthouse_config_path: $(lighthouse_config_path)
                    lighthouse_config_filename: $(lighthouse_config_filename)

  - stage: Prod
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-webapp
      - name: Environment.ShortName
        value: prod
    jobs:
      - deployment: AppInfraProd
        pool:
          vmImage: $(pool_vm_image)
        container: terraform_custom
        environment: ${{ variables.domain }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '$(self_repo_tf_dir)'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: $(prod-azure-client-id)
                    terraform_backend_client_secret: $(prod-azure-client-secret)
                    terraform_backend_tenant_id: $(prod-azure-tenant-id)
                    terraform_backend_subscription_id: $(prod-azure-subscription-id)
                    terraform_state_rg: $(tf_state_rg)
                    terraform_state_storage: $(tf_state_storage)
                    terraform_state_container: $(tf_state_container)
                    terraform_state_key: $(tf_state_key)
                    # Azure Config
                    azure_client_id: $(prod-azure-client-id)
                    azure_client_secret: $(prod-azure-client-secret)
                    azure_tenant_id: $(prod-azure-tenant-id)
                    azure_subscription_id: $(prod-azure-subscription-id)
                    # TODO: Why does this have component on the end?
                    terraform_state_workspace: $(Environment.ShortName)-$(component)
                    # Global Config
                    company: $(company)
                    project: $(project)
                    environment: ''
                    azure_cli_providers: [
                      {name: MSIPreview, namespace: Microsoft.ContainerService}
                    ]
                    # Azure config
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: $(region),
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_gateway_frontend_ip_name: "amido-stacks-prod-euw-core",
                      TF_VAR_app_insights_name: "amido-stacks-prod-euw-core",
                      TF_VAR_core_resource_group: "amido-stacks-prod-euw-core",
                      TF_VAR_name_company: $(company),
                      TF_VAR_name_project: $(project),
                      TF_VAR_name_domain: $(domain),
                      TF_VAR_name_component: $(component),
                      TF_VAR_stage: $(Environment.ShortName),
                      TF_VAR_create_cosmosdb: false,
                      # TODO: Should this be domain like everything else?
                      TF_VAR_dns_record: $(Environment.ShortName)-$(component),
                      TF_VAR_dns_zone_name: $(base_domain_prod),
                      TF_VAR_dns_zone_resource_group: "$(dns_zone_resource_group)",
                      TF_VAR_internal_dns_zone_name: $(base_domain_internal_prod),
                      TF_VAR_account_replication_type: "LRS",
                      TF_VAR_account_kind: "StorageV2",
                      TF_VAR_account_tier: "Standard",
                      TF_VAR_storage_container_name: "$(test_results_container)",
                      TF_VAR_create_cache: true,
                      TF_VAR_cache_capacity: "2",
                      TF_VAR_cache_family: "C",
                      TF_VAR_cache_sku_name: "Standard",
                      TF_VAR_cache_enable_non_ssl_port: "false",
                      TF_VAR_cache_minimum_tls_version: "1.2",
                      TF_VAR_cache_redis_enable_authentication: "true",
                      TF_VAR_cache_redis_maxmemory_reserved: "2",
                      TF_VAR_cache_redis_maxmemory_delta: "2",
                      TF_VAR_cache_redis_maxmemory_policy: "allkeys-lru",
                      TF_VAR_response_header_cdn: "[
                          {
                            action = \"Append\",
                            name = \"Content-Security-Policy\",
                            value = \"default-src * 'unsafe-inline' 'unsafe-eval'\",
                          },
                      ]",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<<"$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: PromotionProd
        dependsOn: AppInfraProd
        container: k8s_deploy
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        variables:
          - group: amido-stacks-infra-credentials-nonprod
          - group: amido-stacks-infra-credentials-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - task: Bash@3
                  inputs:
                    filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
                    arguments: >
                      -a "$(docker_image_name):$(docker_image_tag)"
                      -b "$(k8s_docker_registry_nonprod)"
                      -c "$(azure-subscription-id)"
                      -d "$(azure-client-id)"
                      -e "$(azure-client-secret)"
                      -f "$(azure-tenant-id)"
                      -g "$(k8s_docker_registry_prod)"
                      -h "$(prod-azure-subscription-id)"
                      -i "$(prod-azure-client-id)"
                      -j "$(prod-azure-client-secret)"
                      -k "$(prod-azure-tenant-id)"
                      -Z "false"
                  displayName: Promote Docker Image to Production ACR

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
          - PromotionProd
        variables:
          - name: redis_host
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.redis_cache_hostname'] ]
          - name: redis_key
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.redis_cache_key'] ]
          - name: app_insights_instrumentation_key
            value: $[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.app_insights_instrumentation_key'] ]
          - name: storage_account_name
            value: $[ dependencies.AppInfraDev.outputs['AppInfraProd.tfoutputs.storage_account_name'] ]
          # TODO: Should this be domain like everything else?
          - name: namespace
            value: $(Environment.ShortName)-$(component)
          - name: dns_pointer
            value: "$(Environment.ShortName)-$(component).$(base_domain_prod)"
          - name: api_full_url
            value: "https://$(Environment.ShortName)-netcore-api.$(base_domain_prod)/api/menu"
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: 'templates/steps/deploy/deploy-app.yml'
                  parameters:
                    container: "k8s_deploy"
                    pipeline_scripts_directory: $(self_pipeline_scripts_dir)
                    shared_replacements: {
                      namespace: $(namespace),
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: $(component),
                      resource_def_name: $(component),
                      version: $(docker_image_tag),
                      environment: $(Environment.ShortName)
                    }
                    template_input: [
                      {
                        base: "${{ variables.self_repo_dir }}/deploy/k8s/app/base_app-deploy.yml",
                        out: "${{ variables.self_repo_dir }}/deploy/k8s/app/app-deploy.yml",
                        displayName: App Deployment,
                        replacements: {
                          dns_pointer: "${{ variables.dns_pointer }}",
                          tls_domain: $(base_domain_prod),
                          k8s_app_path: /web/stacks,
                          k8s_image: '$(k8s_docker_registry_prod)/$(docker_image_name):$(docker_image_tag)',
                          api_url: "${{ variables.api_full_url }}",
                          app_name: webapp-template,
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(app_insights_instrumentation_key),
                          next_public_token: $(NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN),
                          next_space_id: $(NEXT_PUBLIC_CONTENTFUL_SPACE_ID),
                          auth_client_secret: $(AUTH0_CLIENT_SECRET),
                          auth_domain: $(AUTH0_DOMAIN),
                          auth_client_id: $(AUTH0_CLIENT_ID),
                          redis_host: $(redis_host),
                          redis_key: $(redis_key),
                          redis_port: "6380",
                          redis_enabled: "true"
                        },
                        args: "-no-empty",
                      }
                    ]
                    azure_client_id: "$(prod-azure-client-id)"
                    azure_client_secret: "$(prod-azure-client-secret)"
                    azure_tenant_id: "$(prod-azure-tenant-id)"
                    azure_subscription_id: "$(prod-azure-subscription-id)"
                    aks_cluster_resourcegroup: "amido-stacks-prod-euw-core"
                    aks_cluster_name: "amido-stacks-prod-euw-core"
                    # Used to do a `kubectl rollout status`
                    deployments: [
                      {
                        name: "deploy/$(component)",
                        namespace: "${{ variables.namespace }}",
                        timeout: "120s",
                      },
                    ]

                - template: "templates/steps/deploy/deploy-post-deploy-tests.yml"
                  parameters:
                    app_base_url: "https://${{ variables.dns_pointer }}"
                    app_path: "/web/stacks"
                    api_full_url: "${{ variables.api_full_url }}"
                    testcafe_e2e_test: ${{ variables.testcafe_e2e_test }}
                    testcafe_working_directory: "$(testcafe_working_directory)"
                    test_results_storage: $(storage_account_name)
                    test_results_container: $(test_results_container)
                    test_results_path: $(testcafe_working_directory)
                    test_results_blob_prefix: "$(Environment.ShortName)-$(Build.BuildNumber)"
                    lighthouse_audit: ${{ variables.lighthouse_audit }}
                    lighthouse_config_path: $(lighthouse_config_path)
                    lighthouse_config_filename: $(lighthouse_config_filename)
